Balloons (Weichen Liu, Josiah Moltz, Sophia Eiden)
APCS pd6
Lab04 -- SORTS
2022-01-06
time spent:  1.5 hrs

Overall
* DISCO
*  0. Better (sort of) understanding of big O(n)
*  1. We should include comparisons, passes, and swaps in formal Big Oh analysis
* QCC
*  0.

Bubble
* DISCO
*  0. It is called a Bubble Sort because it essentially spawns a bubble at the right
   that drags the smallest element to the end (sort of?)
*  1. EPIC SWAPPING METHOD IN SHUFFLE WOAH
*
* QCC
*  q0: If a pass requires no swaps, what do you know?
*  a0: We are done!
*  q1: After pass p, what do you know?
*  a1: The beginning p elements are properly sorted!
*  q2: How many passes are necessary to completely sort?
*  a2: length of list - 1
*  0. Is it more important to look at number of changes made, or just repeat until worst case scenario reached.

Selection
* DISCO
* We can nest a set method inside another set method when we want to swap elements. It is more efficient.
*
* QCC
* q0: How many passes to sort n elements?
* a0: n-1
* q1: What do you know after pass p?
* a1: The first p elements are in their final resting places (so morbid)
* q2: How do you know if sorted?
* a2: If we have completed n-1 passes
* q3: What does a pass boil down to?
* a3: Find the pth smallest number, and place it in the pth position (p-1 index)
* Do we lose any efficiency in assigning maxPos to be 0 instead of another value (say pass)?

Insertion
* DISCO
* KTS is very necessary when coming up with an algorithm.
* (out of school) Big O notation - insertion sort has a O(n^2) - visualization for time complexity
*
* QCC
* q0: How many passes to sort n elements?
* a0: n - 1 passes
* q1: What do you know after pass p?
* a1: Elements that have indices p and less are in the sorted section of the array list.
* q2: How will you know when sorted?
* a2: When the sorted section of the array list takes up the entire array list, we know that the array list is sorted.
* q3: What constitues a pass?
* a3: One traversion of a partition
* q4: What must you track?
* a4: We must track which parts of the array list is sorted and not sorted.
